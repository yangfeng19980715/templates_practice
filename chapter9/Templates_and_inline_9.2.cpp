//
// Created by yangfeng on 2022/7/29.
//

#include "../headers.h"

/*
模板和 inline
    提高程序运行性能的一个常规手段是将函数声明为 inline 的。
     Inline 关键字的意思是给编译器做一个暗示，要优先在函数调用处将函数体做 inline 替换展开，
      而不是按常规的调用机制执行。
      
    但是编译器可能会忽略这一暗示。
        这样 inline 唯一可以保证的效果就是允许函数定义在程序中出现多次（因为其通常出现在被在多处调用的头文件中）。
    
    和 inline 函数类似，函数模板也可以被定义在多个编译单元中。
    比如我们通常将模板定义放在头文件中，而这个头文件又被多个 CPP 文件包含。
    
    但是这并不意味着函数模板在默认情况下就会使用 inline 替换。
        在模板调用处是否进行 inline替换完全是由编译器决定的事情。
        
    编译器通常能够更好的评估 Inline 替换一个被调用函数是否能够提升程序性能。
    因此不同编译器之间对 inline 函数处理的精准原则也是不同的，这甚至会受编译选项的影响。
    
    然而，通过使用合适的性能检测工具进行测试，程序员可能会比编译器更知道是否应该进行inline 替换，
        因此也希望自己能够决定（而不是让编译器决定）是否需要进行 inline 替换。
        
    有时候这只能通过编译器的具体属性实现，比如 noinline 和 always_inline。
    
    目前需要指出的一个问题是，就这一问题而言，函数模板在全特化之后和常规函数是一样的：
        除非其被定义成 inline 的，否则它只能被定义一次。
    
    更全面也更细致的介绍请参见附录 A。
 */

using namespace std;

namespace ch9_2 {

    class Tmp {
    public:
    
    };

}

int
//main()
main_templates_and_inline()
{

    return 0;
}
