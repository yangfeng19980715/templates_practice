 可以将函数，函数指针，函数对象，仿函数和 lambdas 作为可调用对象（callables）传递给模板。

 如果需要为一个 class 重载 operator()，那么就将其声明为 const 的（除非该调用会修改它的状态）。

 通过使用 std::invoke()，可以实现能够处理所有类型的、可调用对象（包含成员函数）的代码。

 使用 decltype(auto)来完美转发返回值。

 类型萃取是可以检查类型的属性和功能的类型函数。

 当在模板中需要一个对象的地址时，使用 std::addressof().

 在不经过表达式计算的情况下，可以通过使用 std::declval()创建特定类型的值。

 在泛型代码中，如果一个对象不依赖于模板参数，那么就使用 auto&&来完美转发它。

 可以通过模板来延迟表达式的计算（这样可以在 class 模板中支持不完整类型）。

